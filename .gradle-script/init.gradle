apply from: '.gradle-script/common-text.gradle'
apply from: '.gradle-script/common-methods.gradle'

final String TASK_GROUP = 'module setup'
final String MSA = 'msa'
final String CLOUD = 'msa'
final String LIBRARY = 'msa'
final String SRC_MAIN_DIR = '/src/main'
final String SRC_TEST_DIR = '/src/test'
final String GROUP_PACKAGE = '/com/example/pj'

final String[] HEXAGONAL_LAYER = [
        '/adapter-in-web',
        '/adapter-out-persistence',
        '/app-domain',
        '/app-port-in',
        '/app-port-out',
        '/app-service',
        '/boot'
]

def resolveOption(String property, String desc) {

    if( project.hasProperty(property) ) {
        return project.property(property)
    } else {
        throw new GradleException(
                """
===============================[ERROR]===============================
        option [${property}]이 gradle task 명령어에 포함되어있지 않습니다.
        아래 option이 포함된 명령어를 다시 실행해주세요.
        \$ gradlew -q createModule -P${property}=${desc}
=====================================================================
        """
        )
    }
}

tasks.register("init-msa") {
    description 'Setup a new module directory structure and build script'
    group TASK_GROUP

    String moduleName = resolveOption("moduleName", "모듈명")
    def moduleDir = file("$MSA/$moduleName")
//    def srcDir = moduleDir.path + '/src/main/java'
//    def buildScript = moduleDir.path + '/test-build.gradle'

    inputs.property 'moduleName', moduleName
    outputs.dir moduleDir

    doFirst {
        moduleDir.mkdirs()

        for (String layer : HEXAGONAL_LAYER) {
            String fullSrcJavaPath = "$moduleDir.path$layer$SRC_MAIN_DIR/java$GROUP_PACKAGE"
            String fullSrcTestPath = "$moduleDir.path$layer$SRC_TEST_DIR/java$GROUP_PACKAGE"
            String fullDomainSrcJavaPath = "$fullSrcJavaPath/${toSnakeCase(moduleName)}"
            String fullDomainSrcTestPath = "$fullSrcTestPath/${toSnakeCase(moduleName)}"

            file("$moduleDir.path$layer$SRC_MAIN_DIR/resources").mkdirs()
            file("$moduleDir.path$layer$SRC_TEST_DIR/resources").mkdirs()

            switch (layer) {
                case '/adapter-in-web':
                    file("$fullDomainSrcJavaPath").mkdirs()
                    file("$fullDomainSrcTestPath").mkdirs()
                    break
                case '/adapter-out-persistence':
                    file("$fullDomainSrcJavaPath").mkdirs()
                    file("$fullDomainSrcTestPath").mkdirs()
                    break
                case '/app-domain':
                    file("$fullDomainSrcJavaPath").mkdirs()
                    file("$fullDomainSrcTestPath").mkdirs()
                    break
                case '/app-port-in':
                    file("$fullDomainSrcJavaPath").mkdirs()
                    file("$fullDomainSrcTestPath").mkdirs()
                    break
                case '/app-port-out':
                    file("$fullDomainSrcJavaPath").mkdirs()
                    file("$fullDomainSrcTestPath").mkdirs()
                    break
                case '/app-service':
                    file("$fullDomainSrcJavaPath").mkdirs()
                    file("$fullDomainSrcTestPath").mkdirs()
                    break
                case '/boot':
                    file("$fullSrcJavaPath").mkdirs()
                    file("$fullSrcTestPath").mkdirs()
                    file("$fullSrcJavaPath/${toCamelCase(moduleName, true)}Application.java") << getApplicationClassText(toCamelCase(moduleName, true))
                    break
                default:
                    break
            }
            file("$moduleDir.path$layer/.gitignore") << getGitignoreText()
            file("$moduleDir.path$layer/build.gradle") << getBuildGradleText()
        }

        file("settings.gradle") << getIncludeListText(moduleName)
    }

    doLast {
        println "Module '$moduleName' created successfully. please reload gradle project"
    }

    finalizedBy {
    }


}


//tasks.every { task ->
//    if ( name != 'initMsa') {
//        task.dependsOn initMsa
////        task.dependsOn initMsa
//    }
//}

//tasks.register('reloadProject', Exec) {
//    commandLine 'gradle', 'prepareKotlinBuildScriptModel'
//    workingDir project.rootDir
//    println('RUN reloadProject')
//}

//initMsa.mustRunAfter(reloadProject)

//reloadProject.mustRunAfter(initMsa)

//initMsa.finalizedBy(reloadProject)